{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-cubejs Welcome! Prefect collection of tasks to interact with Cube.js Getting Started Python setup Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-cubejs with pip : pip install prefect-cubejs Write and run a flow from prefect import flow from prefect_cubejs.tasks import ( run_query ) @flow def example_flow (): run_query ( subdomain = \"<your Cube Cloud subdomain>\" , api_secret = \"<your Cube.js API secret>\" , query = \"<a Cube.js JSON formatted query>\" ) example_flow () Resources If you encounter any bugs while using prefect-cubejs , feel free to open an issue in the prefect-cubejs repository. If you have any questions or issues while using prefect-cubejs , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Development If you'd like to install a version of prefect-cubejs for development, clone the repository and perform an editable install with pip : git clone https://github.com/AlessandroLollo/prefect-cubejs.git cd prefect-cubejs/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-cubejs","text":"","title":"prefect-cubejs"},{"location":"#welcome","text":"Prefect collection of tasks to interact with Cube.js","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-cubejs with pip : pip install prefect-cubejs","title":"Installation"},{"location":"#write-and-run-a-flow","text":"from prefect import flow from prefect_cubejs.tasks import ( run_query ) @flow def example_flow (): run_query ( subdomain = \"<your Cube Cloud subdomain>\" , api_secret = \"<your Cube.js API secret>\" , query = \"<a Cube.js JSON formatted query>\" ) example_flow ()","title":"Write and run a flow"},{"location":"#resources","text":"If you encounter any bugs while using prefect-cubejs , feel free to open an issue in the prefect-cubejs repository. If you have any questions or issues while using prefect-cubejs , you can find help in either the Prefect Discourse forum or the Prefect Slack community .","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-cubejs for development, clone the repository and perform an editable install with pip : git clone https://github.com/AlessandroLollo/prefect-cubejs.git cd prefect-cubejs/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"tasks/","text":"prefect_cubejs.tasks Collection of tasks to interact with Cube.js run_query TODO Source code in prefect_cubejs/tasks.py @task def run_query ( subdomain : str = None , url : str = None , api_secret : str = None , api_secret_env_var : str = \"CUBEJS_API_SECRET\" , query : Union [ Dict , List [ Dict ]] = None , include_generated_sql : bool = False , security_context : Union [ str , Dict ] = None , wait_time_between_api_calls : int = 10 , max_wait_time : int = None , ): \"\"\" TODO \"\"\" if not subdomain and not url : msg = \"Missing both `subdomain` and `url`.\" raise CubeJSConfigurationException ( msg ) if not api_secret and api_secret_env_var not in os . environ : msg = \"Missing `api_secret` and `api_secret_env_var` not found.\" raise CubeJSConfigurationException ( msg ) if not query : msg = \"Missing `query`.\" raise CubeJSConfigurationException ( msg ) secret = api_secret if api_secret else os . environ [ api_secret_env_var ] wait_api_call_secs = ( wait_time_between_api_calls if wait_time_between_api_calls > 0 else 10 ) cubejs_client = CubeJSClient ( subdomain = subdomain , url = url , security_context = security_context , secret = secret , wait_api_call_secs = wait_api_call_secs , max_wait_time = max_wait_time , ) params = { \"query\" : json . dumps ( query )} # Retrieve data from Cube.js data = cubejs_client . get_data ( params = params , include_generated_sql = include_generated_sql ) return data","title":"Tasks"},{"location":"tasks/#prefect_cubejs.tasks","text":"Collection of tasks to interact with Cube.js","title":"tasks"},{"location":"tasks/#prefect_cubejs.tasks.run_query","text":"TODO Source code in prefect_cubejs/tasks.py @task def run_query ( subdomain : str = None , url : str = None , api_secret : str = None , api_secret_env_var : str = \"CUBEJS_API_SECRET\" , query : Union [ Dict , List [ Dict ]] = None , include_generated_sql : bool = False , security_context : Union [ str , Dict ] = None , wait_time_between_api_calls : int = 10 , max_wait_time : int = None , ): \"\"\" TODO \"\"\" if not subdomain and not url : msg = \"Missing both `subdomain` and `url`.\" raise CubeJSConfigurationException ( msg ) if not api_secret and api_secret_env_var not in os . environ : msg = \"Missing `api_secret` and `api_secret_env_var` not found.\" raise CubeJSConfigurationException ( msg ) if not query : msg = \"Missing `query`.\" raise CubeJSConfigurationException ( msg ) secret = api_secret if api_secret else os . environ [ api_secret_env_var ] wait_api_call_secs = ( wait_time_between_api_calls if wait_time_between_api_calls > 0 else 10 ) cubejs_client = CubeJSClient ( subdomain = subdomain , url = url , security_context = security_context , secret = secret , wait_api_call_secs = wait_api_call_secs , max_wait_time = max_wait_time , ) params = { \"query\" : json . dumps ( query )} # Retrieve data from Cube.js data = cubejs_client . get_data ( params = params , include_generated_sql = include_generated_sql ) return data","title":"run_query()"}]}