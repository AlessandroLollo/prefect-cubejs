{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prefect-cubejs","text":""},{"location":"#welcome","title":"Welcome!","text":"<p>Prefect collection of tasks to interact with Cube.js</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#python-setup","title":"Python setup","text":"<p>Requires an installation of Python 3.7+.</p> <p>We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.</p> <p>These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>prefect-cubejs</code> with <code>pip</code>:</p> <pre><code>pip install prefect-cubejs\n</code></pre>"},{"location":"#write-and-run-a-flow","title":"Write and run a flow","text":"<pre><code>from prefect import flow\nfrom prefect_cubejs.tasks import (\n    run_query\n)\n\n\n@flow\ndef example_flow():\n    run_query(\n        subdomain=\"&lt;your Cube Cloud subdomain&gt;\",\n        api_secret=\"&lt;your Cube.js API secret&gt;\",\n        query=\"&lt;a Cube.js JSON formatted query&gt;\"\n    )\n\nexample_flow()\n</code></pre>"},{"location":"#resources","title":"Resources","text":"<p>If you encounter any bugs while using <code>prefect-cubejs</code>, feel free to open an issue in the prefect-cubejs repository.</p> <p>If you have any questions or issues while using <code>prefect-cubejs</code>, you can find help in either the Prefect Discourse forum or the Prefect Slack community.</p>"},{"location":"#development","title":"Development","text":"<p>If you'd like to install a version of <code>prefect-cubejs</code> for development, clone the repository and perform an editable install with <code>pip</code>:</p> <pre><code>git clone https://github.com/AlessandroLollo/prefect-cubejs.git\n\ncd prefect-cubejs/\n\npip install -e \".[dev]\"\n\n# Install linting pre-commit hooks\npre-commit install\n</code></pre>"},{"location":"tasks/","title":"Tasks","text":""},{"location":"tasks/#prefect_cubejs.tasks","title":"<code>prefect_cubejs.tasks</code>","text":"<p>Collection of tasks to interact with Cube.js</p>"},{"location":"tasks/#prefect_cubejs.tasks.build_pre_aggregations","title":"<code>build_pre_aggregations</code>","text":"<p>Task run method to perform pre-aggregations build.</p> <p>Parameters:</p> Name Type Description Default <code>-</code> <code>subdomain (str</code> <p>The subdomain to use to get the data. If provided, <code>subdomain</code> takes precedence over <code>url</code>. This is likely to be useful to Cube Cloud users.</p> required <code>-</code> <code>url (str</code> <p>The URL to use to get the data. This is likely the preferred method for self-hosted Cube deployments. For Cube Cloud deployments, the URL should be in the form <code>https://&lt;cubejs-generated-host&gt;/cubejs-api</code>.</p> required <code>-</code> <code>api_secret (str</code> <p>The API secret used to generate an API token for authentication. If provided, it takes precedence over <code>api_secret_env_var</code>.</p> required <code>-</code> <code>api_secret_env_var (str</code> <p>The name of the env var that contains the API secret to use to generate an API token for authentication. Defaults to <code>CUBEJS_API_SECRET</code>.</p> required <code>-</code> <code>security_context (str, dict</code> <p>The security context to use during authentication. If the security context does not contain an expiration period, then a 7-day expiration period is added automatically. More info at https://cube.dev/docs/security/context.</p> required <code>-</code> <code>selector (dict</code> <p><code>dict</code> representing valid Cube <code>pre-aggregations/jobs</code> API <code>selector</code> object.</p> required <code>-</code> <code>wait_for_job_run_completion (boolean</code> <p>Whether the task should wait for the job run completion or not. Default to False.</p> required <code>-</code> <code>wait_time_between_api_calls (int</code> <p>The number of seconds to wait between API calls. Default to 10.</p> required <p>Returns:</p> Type Description <ul> <li>If <code>wait_for_job_run_completion = False</code>, then returns the Cube <code>pre-aggregations/jobs</code> API trigger run result.</li> </ul> <ul> <li>If <code>wait_for_job_run_completion = True</code>, then returns <code>True</code> if pre-aggregations were successfully built. Raise otherwise.</li> </ul> Source code in <code>prefect_cubejs/tasks.py</code> <pre><code>@task\ndef build_pre_aggregations(\n    subdomain: Optional[str] = None,\n    url: Optional[str] = None,\n    api_secret: Optional[str] = None,\n    api_secret_env_var: Optional[str] = \"CUBEJS_API_SECRET\",\n    security_context: Optional[Union[str, Dict]] = None,\n    selector: Dict = None,\n    wait_for_job_run_completion: bool = False,\n    wait_time_between_api_calls: Optional[int] = 10,\n):\n\"\"\"\n    Task run method to perform pre-aggregations build.\n\n    Args:\n        - subdomain (str, optional): The subdomain to use to get the data.\n            If provided, `subdomain` takes precedence over `url`.\n            This is likely to be useful to Cube Cloud users.\n        - url (str, optional): The URL to use to get the data.\n            This is likely the preferred method for self-hosted Cube\n            deployments.\n            For Cube Cloud deployments, the URL should be in the form\n            `https://&lt;cubejs-generated-host&gt;/cubejs-api`.\n        - api_secret (str, optional): The API secret used to generate an\n            API token for authentication.\n            If provided, it takes precedence over `api_secret_env_var`.\n        - api_secret_env_var (str, optional): The name of the env var that contains\n            the API secret to use to generate an API token for authentication.\n            Defaults to `CUBEJS_API_SECRET`.\n        - security_context (str, dict, optional): The security context to use\n            during authentication.\n            If the security context does not contain an expiration period,\n            then a 7-day expiration period is added automatically.\n            More info at https://cube.dev/docs/security/context.\n        - selector (dict): `dict` representing valid Cube `pre-aggregations/jobs`\n            API `selector` object.\n        - wait_for_job_run_completion (boolean, optional):\n            Whether the task should wait for the job run completion or not.\n            Default to False.\n        - wait_time_between_api_calls (int, optional): The number of seconds to\n            wait between API calls.\n            Default to 10.\n\n    Raises:\n        - `CubeJSConfigurationException` if both `subdomain` and `url` are missing.\n        - `CubeJSConfigurationException` if `api_token` is missing and\n            `api_token_env_var` cannot be found.\n        - `CubeJSConfigurationException` if `selector` is missing.\n        - `CubeJSAPIFailureException` if the Cube `pre-aggregations/jobs` API fails.\n        - `CubeJSAPIFailureException` if any pre-aggregations were not built.\n\n    Returns:\n        - If `wait_for_job_run_completion = False`, then returns the Cube\n            `pre-aggregations/jobs` API trigger run result.\n        - If `wait_for_job_run_completion = True`, then returns `True` if\n            pre-aggregations were successfully built. Raise otherwise.\n    \"\"\"\n\n    logger = get_run_logger()\n\n    # assert\n    if not subdomain and not url:\n        raise CubeJSConfigurationException(\"Missing both `subdomain` and `url`.\")\n\n    if not api_secret and api_secret_env_var not in os.environ:\n        raise CubeJSConfigurationException(\n            \"Missing `api_secret` and `api_secret_env_var` not found.\"\n        )\n\n    if not selector:\n        raise CubeJSConfigurationException(\"Missing `selector`.\")\n\n    # client\n    secret = api_secret if api_secret else os.environ[api_secret_env_var]\n    cubejs_client = CubeJSClient(\n        subdomain=subdomain,\n        url=url,\n        security_context=security_context,\n        secret=secret,\n        wait_api_call_secs=None,\n        max_wait_time=None,\n    )\n\n    # post\n    query = json.dumps(\n        {\n            \"action\": \"post\",\n            \"selector\": selector,\n        }\n    )\n    tokens = cubejs_client.pre_aggregations_jobs(query=query)\n    if not wait_for_job_run_completion:\n        return tokens\n\n    # wait for the job completion\n    iterate = len(tokens) &gt; 0\n    while iterate:\n\n        # fetch\n        logger.info(\n            f\"waiting {wait_time_between_api_calls}sec for the job completion...\"\n        )\n        time.sleep(wait_time_between_api_calls)\n        query = json.dumps(\n            {\n                \"action\": \"get\",\n                \"resType\": \"object\",\n                \"tokens\": tokens,\n            }\n        )\n        statuses = cubejs_client.pre_aggregations_jobs(query=query)\n\n        # check\n        missing_only = True\n        all_tokens = statuses.keys()\n        in_process = []\n        for token in all_tokens:\n            status = statuses[token][\"status\"]\n            if status.find(\"failure\") &gt;= 0:\n                msg = f\"\"\"\n                Cube pre-aggregations build failed: {status}.\n                \"\"\"\n                raise CubeJSAPIFailureException(msg)\n            if status != \"missing_partition\":\n                missing_only = False\n            if status != \"done\":\n                in_process.append(token)\n\n        if missing_only:\n            msg = \"\"\"\n            Cube pre-aggregations build failed: missing partitions.\n            \"\"\"\n            raise CubeJSAPIFailureException(msg)\n\n        iterate = len(in_process) &gt; 0\n\n    # result\n    return True\n</code></pre>"},{"location":"tasks/#prefect_cubejs.tasks.run_query","title":"<code>run_query</code>","text":"<p>This task calls Cube.js load API and returns the result as a JSON object. More info about Cube.js load API at https://cube.dev/docs/rest-api#api-reference-v-1-load.</p> <p>Parameters:</p> Name Type Description Default <code>subdomain</code> <code>Optional[str]</code> <p>The subdomain to use to get the data. If provided, <code>subdomain</code> takes precedence over <code>url</code>. This is likely to be useful to Cube Cloud users.</p> <code>None</code> <code>url</code> <code>Optional[str]</code> <p>The URL to use to get the data. This is likely to be useful to users of self-hosted Cube.js.</p> <code>None</code> <code>api_secret</code> <code>Optional[str]</code> <p>The API secret used to generate an API token for authentication. If provided, it takes precedence over <code>api_secret_env_var</code>.</p> <code>None</code> <code>api_secret_env_var</code> <code>Optional[str]</code> <p>The name of the env var that contains the API secret to use to generate an API token for authentication. Defaults to <code>CUBEJS_API_SECRET</code>.</p> <code>'CUBEJS_API_SECRET'</code> <code>query</code> <code>Union[Dict, List[Dict]]</code> <p><code>dict</code> or <code>list</code> representing valid Cube.js queries. If you pass multiple queries, then be aware of Cube.js Data Blending. More info at https://cube.dev/docs/rest-api#api-reference-v-1-load and at https://cube.dev/docs/schema/advanced/data-blending. Query format can be found at: https://cube.dev/docs/query-format.</p> required <code>include_generated_sql</code> <code>Optional[bool]</code> <p>Whether the return object should include SQL info or not. Default to <code>False</code>.</p> <code>False</code> <code>security_context</code> <code>Optional[Union[str, Dict]]</code> <p>The security context to use during authentication. If the security context does not contain an expiration period, then a 7-day expiration period is added automatically. More info at: https://cube.dev/docs/security/context.</p> <code>None</code> <code>wait_time_between_api_calls</code> <code>Optional[int]</code> <p>The number of seconds to wait between API calls. Default to 10.</p> <code>10</code> <code>max_wait_time</code> <code>Optional[int]</code> <p>The number of seconds to wait for the Cube.js load API to return a response.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict</code> <p>The Cube.js JSON response, augmented with SQL information if <code>include_generated_sql</code> is <code>True</code>.</p> Source code in <code>prefect_cubejs/tasks.py</code> <pre><code>@task\ndef run_query(\n    query: Union[Dict, List[Dict]],\n    subdomain: Optional[str] = None,\n    url: Optional[str] = None,\n    api_secret: Optional[str] = None,\n    api_secret_env_var: Optional[str] = \"CUBEJS_API_SECRET\",\n    include_generated_sql: Optional[bool] = False,\n    security_context: Optional[Union[str, Dict]] = None,\n    wait_time_between_api_calls: Optional[int] = 10,\n    max_wait_time: Optional[int] = None,\n) -&gt; Dict:\n\"\"\"\n    This task calls Cube.js load API and returns the result\n    as a JSON object.\n    More info about Cube.js load API at\n    https://cube.dev/docs/rest-api#api-reference-v-1-load.\n\n    Args:\n        subdomain: The subdomain to use to get the data.\n            If provided, `subdomain` takes precedence over `url`.\n            This is likely to be useful to Cube Cloud users.\n        url: The URL to use to get the data.\n            This is likely to be useful to users of self-hosted Cube.js.\n        api_secret: The API secret used to generate an\n            API token for authentication.\n            If provided, it takes precedence over `api_secret_env_var`.\n        api_secret_env_var: The name of the env var that contains\n            the API secret to use to generate an API token for authentication.\n            Defaults to `CUBEJS_API_SECRET`.\n        query: `dict` or `list` representing\n            valid Cube.js queries.\n            If you pass multiple queries, then be aware of Cube.js Data Blending.\n            More info at https://cube.dev/docs/rest-api#api-reference-v-1-load\n            and at https://cube.dev/docs/schema/advanced/data-blending.\n            Query format can be found at: https://cube.dev/docs/query-format.\n        include_generated_sql: Whether the return object should\n            include SQL info or not.\n            Default to `False`.\n        security_context: The security context to use\n            during authentication.\n            If the security context does not contain an expiration period,\n            then a 7-day expiration period is added automatically.\n            More info at: https://cube.dev/docs/security/context.\n        wait_time_between_api_calls: The number of seconds to\n            wait between API calls.\n            Default to 10.\n        max_wait_time: The number of seconds to wait for the\n            Cube.js load API to return a response.\n\n    Raises:\n        - `CubeJSConfigurationException` if both `subdomain` and `url` are missing.\n        - `CubeJSConfigurationException` if `api_token` is missing\n            and `api_token_env_var` cannot be found.\n        - `CubeJSConfigurationException` if `query` is missing.\n        - `CubeJSAPIFailureException` if the Cube.js load API fails.\n        - `CubeJSAPIFailureException` if the Cube.js load API takes more than\n            `max_wait_time` seconds to respond.\n\n    Returns:\n        The Cube.js JSON response, augmented with SQL\n            information if `include_generated_sql` is `True`.\n    \"\"\"\n\n    if not subdomain and not url:\n        msg = \"Missing both `subdomain` and `url`.\"\n        raise CubeJSConfigurationException(msg)\n\n    if not api_secret and api_secret_env_var not in os.environ:\n        msg = \"Missing `api_secret` and `api_secret_env_var` not found.\"\n        raise CubeJSConfigurationException(msg)\n\n    if not query:\n        msg = \"Missing `query`.\"\n        raise CubeJSConfigurationException(msg)\n\n    secret = api_secret if api_secret else os.environ[api_secret_env_var]\n\n    wait_api_call_secs = (\n        wait_time_between_api_calls if wait_time_between_api_calls &gt; 0 else 10\n    )\n\n    cubejs_client = CubeJSClient(\n        subdomain=subdomain,\n        url=url,\n        security_context=security_context,\n        secret=secret,\n        wait_api_call_secs=wait_api_call_secs,\n        max_wait_time=max_wait_time,\n    )\n\n    params = {\"query\": json.dumps(query)}\n\n    # Retrieve data from Cube.js\n    data = cubejs_client.get_data(\n        params=params, include_generated_sql=include_generated_sql\n    )\n\n    return data\n</code></pre>"}]}